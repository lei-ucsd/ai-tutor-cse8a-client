"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const tslib_1 = require("tslib");
const unist_util_visit_1 = tslib_1.__importDefault(require("unist-util-visit"));
const npm_to_yarn_1 = tslib_1.__importDefault(require("npm-to-yarn"));
function createTabItem(code, node, value, label) {
    return [
        {
            type: 'jsx',
            value: `<TabItem value="${value}"${label ? ` label="${label}"` : ''}>`,
        },
        {
            type: node.type,
            lang: node.lang,
            value: code,
        },
        {
            type: 'jsx',
            value: '</TabItem>',
        },
    ];
}
const transformNode = (node, isSync, converters) => {
    const groupIdProp = isSync ? ' groupId="npm2yarn"' : '';
    const npmCode = node.value;
    return [
        {
            type: 'jsx',
            value: `<Tabs${groupIdProp}>`,
        },
        ...createTabItem(npmCode, node, 'npm'),
        ...converters.flatMap((converter) => typeof converter === 'string'
            ? createTabItem((0, npm_to_yarn_1.default)(npmCode, converter), node, converter, converter === 'yarn' ? 'Yarn' : converter)
            : createTabItem(converter[1](npmCode), node, converter[0])),
        {
            type: 'jsx',
            value: '</Tabs>',
        },
    ];
};
const isImport = (node) => node.type === 'import';
const isParent = (node) => Array.isArray(node.children);
const matchNode = (node) => node.type === 'code' && node.meta === 'npm2yarn';
const nodeForImport = {
    type: 'import',
    value: "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';",
};
const plugin = (options = {}) => {
    const { sync = false, converters = ['yarn', 'pnpm'] } = options;
    return (root) => {
        let transformed = false;
        let alreadyImported = false;
        (0, unist_util_visit_1.default)(root, (node) => {
            if (isImport(node) && node.value.includes('@theme/Tabs')) {
                alreadyImported = true;
            }
            if (isParent(node)) {
                let index = 0;
                while (index < node.children.length) {
                    const child = node.children[index];
                    if (matchNode(child)) {
                        const result = transformNode(child, sync, converters);
                        node.children.splice(index, 1, ...result);
                        index += result.length;
                        transformed = true;
                    }
                    else {
                        index += 1;
                    }
                }
            }
        });
        if (transformed && !alreadyImported) {
            root.children.unshift(nodeForImport);
        }
    };
};
module.exports = plugin;
//# sourceMappingURL=index.js.map