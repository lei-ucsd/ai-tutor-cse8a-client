"use strict";
const tslib_1 = require("tslib");
/// <refere
const unist_util_visit_1 = tslib_1.__importDefault(require("unist-util-visit"));
const node_querystring_1 = require("node:querystring");
function parseMeta(node) {
    const r = (0, node_querystring_1.parse)(node.meta || '', ' ');
    Object.keys(r).forEach((k) => (r[k] = fromAttributeValue(r[k])));
    return r;
}
function injectThemeImport(root, element) {
    if (!root.children.find((n) => n.type === 'import' && n.value && n.value?.indexOf(`@theme/${element}`) > -1)) {
        root.children.unshift(...[
            {
                type: 'import',
                value: `import ${element} from '@theme/${element}';`,
            },
        ]);
    }
}
function fromAttributeValue(s) {
    if (!s)
        return s;
    if (typeof s === 'string' && s[0] === '"') {
        try {
            return JSON.parse(s);
        }
        catch { }
    }
    return s;
}
function toAttributeValue(s) {
    if (!s)
        return s;
    try {
        const j = JSON.parse(s);
        if (typeof j === 'string')
            s = j;
    }
    catch { }
    return JSON.stringify(s);
}
const plugin = (options = undefined) => {
    const { languages } = options || {};
    return async (root, vfile) => {
        let needsSideEditorButtonImport = false;
        const visited = new Set(); // visit called twice on async
        // collect all nodes
        (0, unist_util_visit_1.default)(root, 'code', (node, nodeIndex, parent) => {
            if (!parent || visited.has(node))
                return;
            visited.add(node);
            const { edit } = parseMeta(node);
            if (edit === undefined)
                return;
            const { lang = '', value } = node;
            const editorId = edit || languages?.[lang || ''] || lang;
            parent.children.splice(nodeIndex + 1, 0, {
                type: 'jsx',
                value: `<SideEditorButton editorId={${toAttributeValue(editorId)}} text={${toAttributeValue(value)}} />`,
            });
            needsSideEditorButtonImport = true;
            return nodeIndex + 2;
        });
        // add import as final step
        if (needsSideEditorButtonImport) {
            injectThemeImport(root, 'SideEditorButton');
        }
    };
};
module.exports = plugin;
//# sourceMappingURL=index.js.map