"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configure = void 0;
const tslib_1 = require("tslib");
const docusaurus_plugin_application_insights_1 = tslib_1.__importDefault(require("@rise4fun/docusaurus-plugin-application-insights"));
const remark_plugin_npm2yarn_1 = tslib_1.__importDefault(require("@docusaurus/remark-plugin-npm2yarn"));
const docusaurus_remark_plugin_compile_code_1 = tslib_1.__importDefault(require("@rise4fun/docusaurus-remark-plugin-compile-code"));
const docusaurus_remark_plugin_code_tabs_1 = tslib_1.__importDefault(require("@rise4fun/docusaurus-remark-plugin-code-tabs"));
const docusaurus_remark_plugin_code_element_1 = tslib_1.__importDefault(require("@rise4fun/docusaurus-remark-plugin-code-element"));
const docusaurus_remark_plugin_side_editor_1 = tslib_1.__importDefault(require("@rise4fun/docusaurus-remark-plugin-side-editor"));
const node_path_1 = require("node:path");
const fs_extra_1 = require("fs-extra");
const validate_peer_dependencies_1 = tslib_1.__importDefault(require("validate-peer-dependencies"));
(0, validate_peer_dependencies_1.default)(__dirname);
const mathPlugin = require('remark-math');
const katexPlugin = require('rehype-katex');
const importFilePlugin = require('@rise4fun/docusaurus-remark-plugin-import-file');
const repo = process.env.GITHUB_REPOSITORY;
/**
 * Injects rise4fun specific configurations
 * @param configuration
 */
async function configure(configuration, options = {}) {
    const { appInsights, compileCode, math, npm2yarn, mermaid, legal, codeTabs, codeSandbox, sideEditor, codeElement, algolia, githubButton, importFile, } = options;
    // injecting legal terms
    const themeConfig = configuration.themeConfig || (configuration.themeConfig = {});
    const stylesheets = configuration.stylesheets || (configuration.stylesheets = []);
    const markdown = configuration.markdown || (configuration.markdown = {});
    const themes = configuration.themes || (configuration.themes = []);
    const footer = themeConfig.footer || (themeConfig.footer = {});
    const navbar = themeConfig.navbar || (themeConfig.navbar = { items: [] });
    const prism = themeConfig.prism || (themeConfig.prism = {});
    const docs = themeConfig.docs || (themeConfig.docs = {});
    const sidebar = docs.sidebar || (docs.sidebar = {});
    const isMicrosoft = /microsoft/i.test(configuration.organizationName || '');
    if (!themeConfig.url && isMicrosoft)
        themeConfig.url = 'https://microsoft.github.io';
    if (!themeConfig.baseUrl)
        themeConfig.baseUrl = '/' + themeConfig.projectName;
    if (!themeConfig.i18n)
        themeConfig.i18n = {
            defaultLocale: 'en',
            locales: ['en'],
        };
    const links = footer.links || (footer.links = []);
    if (legal !== false && isMicrosoft) {
        links.push({
            title: 'Legal',
            items: [
                {
                    label: 'Privacy & Cookies',
                    href: 'https://go.microsoft.com/fwlink/?LinkId=521839',
                },
                {
                    label: 'Terms of Use',
                    href: 'https://www.microsoft.com/en-us/legal/intellectualproperty/copyright',
                },
                {
                    label: 'Trademarks',
                    href: 'https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general',
                },
            ],
        });
        // patch copyrigth
        footer.copyright = `Copyright Â© ${new Date().getFullYear()} Microsoft Corporation.`;
    }
    // sidebar collapse
    sidebar.hideable = true;
    sidebar.autoCollapseCategories = true;
    const plugins = configuration.plugins || (configuration.plugins = []);
    const presets = configuration.presets || (configuration.presets = []);
    // import partial first
    if (importFile !== false)
        injectBeforeDefaultRemarkPlugin(importFilePlugin, importFile);
    // inject app insights
    if (appInsights) {
        if (!('disableCookiesUsage' in appInsights.config)) {
            appInsights.config.disableCookiesUsage = true;
        }
        injectPlugin(docusaurus_plugin_application_insights_1.default, appInsights);
    }
    //  npm2yarn
    if (npm2yarn !== false)
        injectRemarkPlugin(remark_plugin_npm2yarn_1.default, { sync: true }); // npm/yarn
    // math
    if (math !== false) {
        injectRemarkPlugin(mathPlugin); // math
        injectRehypePlugin(katexPlugin, { strict: true });
        injectStylesheet({
            href: 'https://cdn.jsdelivr.net/npm/katex@0.13.24/dist/katex.min.css',
            type: 'text/css',
            integrity: 'sha384-odtC+0UGzzFL/6PNoE8rX/SPcQDXBJ+uRepguP4QkPCm2LBxH3FA3y+fKSiJ+AmM',
            crossorigin: 'anonymous',
        });
    }
    // search algolia
    if (algolia) {
        themeConfig.algolia = {
            contextualSearch: true,
            searchParameters: {},
            searchPagePath: 'search',
            ...algolia,
        };
    }
    // mermaid
    if (mermaid !== false) {
        injectTheme('@docusaurus/theme-mermaid');
        markdown.mermaid = true;
        if (typeof mermaid === 'object')
            themeConfig.mermaid = mermaid;
    }
    if (codeSandbox !== false) {
        injectTheme('@rise4fun/docusaurus-theme-codesandbox-button', codeSandbox);
        if (!themeConfig.codeSandbox)
            themeConfig.codeSandbox = codeSandbox;
    }
    // copy over side editor
    if (!themeConfig.sideEditor)
        themeConfig.sideEditor = sideEditor;
    if (themeConfig.sideEditor) {
        injectTheme('@rise4fun/docusaurus-theme-side-editor', themeConfig.sideEditor);
        injectBeforeDefaultRemarkPlugin(docusaurus_remark_plugin_side_editor_1.default, themeConfig.sideEditor);
    }
    // additional languages
    const additionalLanguages = prism.additionalLanguages || (prism.additionalLanguages = []);
    const extraPrismLanguages = new Set(['lisp']);
    if (compileCode) {
        // resolve npm package versions
        await Promise.all(compileCode.langs
            .filter((o) => !o.version && !!o.npmPackage)
            .map(async (o) => {
            const { npmPackage } = o;
            const pkgJson = `${npmPackage}/package.json`;
            // @ts-ignore
            const langVersion = (await import(pkgJson, { assert: { type: 'json' } })).default.version;
            o.version = langVersion;
        }));
        injectBeforeDefaultRemarkPlugin(docusaurus_remark_plugin_compile_code_1.default, compileCode);
        compileCode.langs.forEach(({ inputLang }) => {
            if (inputLang)
                extraPrismLanguages.add(inputLang);
        });
        const staticDirectories = configuration.staticDirectories || (configuration.staticDirectories = ['static']);
        const assetsPath = '.docusaurus/docusaurus-remark-plugin-compile-code/assets';
        if (!staticDirectories.includes(assetsPath)) {
            staticDirectories.push(assetsPath);
        }
    }
    if (codeTabs !== false) {
        injectBeforeDefaultRemarkPlugin(docusaurus_remark_plugin_code_tabs_1.default, codeTabs);
    }
    Array.from(extraPrismLanguages.values())
        .filter((l) => additionalLanguages.indexOf(l) < 0)
        .forEach((l) => additionalLanguages.push(l));
    // always get space back
    navbar.hideOnScroll = true;
    // this is a big ugly, injecting our style in the global custom css
    presets
        .filter((preset) => Array.isArray(preset) && preset[0] === 'classic')
        .forEach((preset) => {
        const t = preset[1]?.theme;
        if (t.customCss && !Array.isArray(t.customCss))
            t.customCss = [t.customCss];
        const customCss = t.customCss || (t.customCss = []);
        customCss.push((0, node_path_1.resolve)(__dirname, 'rise4fun.css'));
    });
    if (githubButton !== false &&
        repo &&
        !navbar.items.find((i) => i.className === 'header-github-link')) {
        navbar.items.push({
            href: `https://github.com/${repo}`,
            position: 'right',
            className: 'header-github-link',
            'aria-label': 'GitHub repository',
        });
    }
    if (codeElement)
        injectRemarkPlugin(docusaurus_remark_plugin_code_element_1.default, codeElement);
    // save a debug copy
    const assetsPath = '.docusaurus/docusaurus-plugin-rise4fun';
    (0, fs_extra_1.ensureDirSync)(assetsPath);
    (0, fs_extra_1.writeJSONSync)((0, node_path_1.join)(assetsPath, 'docusaurus.config.js'), null, {
        spaces: 4,
    });
    return configuration;
    function injectStylesheet(sheet) {
        stylesheets.push(sheet);
    }
    function injectTheme(theme, options) {
        themes.push(typeof options === 'object' ? [theme, options] : theme);
    }
    function injectPlugin(plugin, options) {
        plugins.push(typeof options === 'object' ? [plugin, options] : plugin);
    }
    function injectRemarkPlugin(remarkPlugin, options) {
        const entry = typeof options === 'object' ? [remarkPlugin, options] : remarkPlugin;
        plugins
            .map((plugin) => plugin.remarkPlugins)
            .filter((rps) => !!rps)
            .push(entry);
        presets
            .filter((preset) => Array.isArray(preset))
            .map((preset) => preset[1])
            .filter((config) => !!config)
            .forEach((config) => {
            config.remarkPlugins?.push(entry);
            pushRemarkPlugin(config.docs, entry);
            pushRemarkPlugin(config.blog, entry);
            pushRemarkPlugin(config.pages, entry);
        });
    }
    function pushRemarkPlugin(node, entry) {
        if (!node)
            return;
        const ps = node.remarkPlugins || (node.remarkPlugins = []);
        ps.push(entry);
    }
    function injectBeforeDefaultRemarkPlugin(remarkPlugin, options) {
        const entry = options ? [remarkPlugin, options] : remarkPlugin;
        presets
            .filter((preset) => Array.isArray(preset))
            .map((preset) => preset[1])
            .filter((config) => !!config)
            .forEach((config) => {
            pushBeforeDefaultRemarkPlugin(config.docs, entry);
            pushBeforeDefaultRemarkPlugin(config.blog, entry);
            pushBeforeDefaultRemarkPlugin(config.pages, entry);
        });
    }
    function pushBeforeDefaultRemarkPlugin(node, entry) {
        if (!node)
            return;
        const ps = node.beforeDefaultRemarkPlugins || (node.beforeDefaultRemarkPlugins = []);
        ps.push(entry);
    }
    function injectRehypePlugin(rehypePlugin, options) {
        const entry = options ? [rehypePlugin, options] : rehypePlugin;
        plugins
            .map((plugin) => plugin.rehypePlugins)
            .filter((rps) => !!rps)
            .push(entry);
        presets
            .filter((preset) => Array.isArray(preset))
            .map((preset) => preset[1])
            .filter((config) => !!config)
            .forEach((config) => {
            config.rehypePlugins?.push(entry);
            pushRehypePlugin(config.docs, entry);
            pushRehypePlugin(config.blog, entry);
            pushRehypePlugin(config.pages, entry);
        });
    }
    function pushRehypePlugin(node, entry) {
        if (!node)
            return;
        const ps = node.rehypePlugins || (node.rehypePlugins = []);
        ps.push(entry);
    }
}
exports.configure = configure;
