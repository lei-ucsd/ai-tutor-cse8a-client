import SideEditorRoot from '@theme/SideEditorRoot';
import React, { createContext, useContext, useState } from 'react';
import useSideEditorConfig from './useSideEditorConfig';
const dummySetSource = () => { };
export const SideEditorContext = createContext({
    setSource: dummySetSource,
});
SideEditorContext.displayName = 'SideEditor';
export function SplitEditorProvider(props) {
    const { children } = props;
    const { editors } = useSideEditorConfig();
    const [source, setSource_] = useState();
    const setSource = (editorId, text) => {
        const editorConfig = editors.find(({ id }) => id === editorId);
        if (!editorId || !editorConfig)
            setSource_(undefined);
        else {
            const newSource = { editorId, text, config: editorConfig };
            setSource_(newSource);
        }
    };
    return (React.createElement(SideEditorContext.Provider, { value: { setSource, source } }, source !== undefined ? React.createElement(SideEditorRoot, { ...props }) : React.createElement(React.Fragment, null, children)));
}
export default function useSideEditorContext() {
    const ctx = useContext(SideEditorContext);
    if (ctx.setSource === dummySetSource)
        throw new Error('SideEditor not properly configured. Did you swizzle Root?');
    return ctx;
}
