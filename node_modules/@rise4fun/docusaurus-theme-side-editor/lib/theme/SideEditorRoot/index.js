import React, { createElement, lazy, Suspense, useMemo } from 'react';
import { Panel, PanelGroup } from 'react-resizable-panels';
import useSideEditorContext from '../../client/SideEditorContext';
import useSideEditorConfig from '../../client/useSideEditorConfig';
import BrowserOnly from '@docusaurus/BrowserOnly';
import ResizeHandle from './ResizeHandle';
const IFrameEditor = lazy(() => import('@theme/IFrameEditor'));
const SideEditorCodePanel = lazy(() => import('@theme/SideEditorCodePanel'));
export default function SideEditorRoot(props) {
    const { children } = props;
    const { persistenceId } = useSideEditorConfig();
    const { source } = useSideEditorContext();
    const { editorId, config } = source || {};
    const { language } = config || {};
    const autoSaveId = persistenceId ? `${persistenceId}/horizontal` : undefined;
    const autoSaveIdV = persistenceId ? `${persistenceId}/vertical` : undefined;
    // no split
    if (!editorId || !config)
        return children;
    const { type } = config;
    // split enabled
    const elementType = useMemo(() => {
        switch (type) {
            case 'iframe':
                return IFrameEditor;
            default:
                return undefined;
        }
    }, [type]);
    if (!elementType)
        return children;
    const editorProps = { config, source };
    const editor = (React.createElement(BrowserOnly, null, () => (React.createElement("div", { style: { overflow: 'auto', height: '100%' } },
        React.createElement(Suspense, { fallback: null }, createElement(elementType, editorProps))))));
    return (React.createElement("div", { style: { height: '100vh' } },
        React.createElement(PanelGroup, { autoSaveId: autoSaveId, direction: "horizontal" },
            React.createElement(Panel, null,
                React.createElement("div", { style: { overflow: 'auto', height: '100%' } }, children)),
            React.createElement(ResizeHandle, null),
            React.createElement(Panel, { collapsible: true }, language ? (React.createElement(PanelGroup, { autoSaveId: autoSaveIdV, direction: "vertical" },
                React.createElement(Panel, null,
                    React.createElement(Suspense, { fallback: null },
                        React.createElement(SideEditorCodePanel, null))),
                React.createElement(ResizeHandle, { direction: "vertical" }),
                React.createElement(Panel, null, editor))) : (editor)))));
}
